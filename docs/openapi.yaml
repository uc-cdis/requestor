components:
  schemas:
    Body_check_user_resource_paths_request_user_resource_paths_post:
      properties:
        permissions:
          items: {}
          title: Permissions
          type: array
        resource_paths:
          items: {}
          title: Resource Paths
          type: array
      required:
      - resource_paths
      title: Body_check_user_resource_paths_request_user_resource_paths_post
      type: object
    Body_update_request_request__request_id__put:
      properties:
        status:
          title: Status
          type: string
      required:
      - status
      title: Body_update_request_request__request_id__put
      type: object
    CreateRequestInput:
      description: Create an access request.
      properties:
        policy_id:
          title: Policy Id
          type: string
        resource_display_name:
          title: Resource Display Name
          type: string
        resource_id:
          title: Resource Id
          type: string
        resource_path:
          title: Resource Path
          type: string
        role_ids:
          items:
            type: string
          title: Role Ids
          type: array
        status:
          title: Status
          type: string
        username:
          title: Username
          type: string
      title: CreateRequestInput
      type: object
    HTTPValidationError:
      properties:
        detail:
          items:
            $ref: '#/components/schemas/ValidationError'
          title: Detail
          type: array
      title: HTTPValidationError
      type: object
    ValidationError:
      properties:
        loc:
          items:
            type: string
          title: Location
          type: array
        msg:
          title: Message
          type: string
        type:
          title: Error Type
          type: string
      required:
      - loc
      - msg
      - type
      title: ValidationError
      type: object
  securitySchemes:
    HTTPBearer:
      scheme: bearer
      type: http
info:
  title: Requestor
  version: 1.5.1
openapi: 3.0.2
paths:
  /_status:
    get:
      operationId: get_status__status_get
      responses:
        '200':
          content:
            application/json:
              schema: {}
          description: Successful Response
      summary: Get Status
      tags:
      - System
  /_version:
    get:
      operationId: get_version__version_get
      responses:
        '200':
          content:
            application/json:
              schema: {}
          description: Successful Response
      summary: Get Version
      tags:
      - System
  /request:
    get:
      description: 'List all the requests the current user has access to see.


        Use the "active" query parameter to get only the requests

        created by the user that are not in DRAFT or FINAL statuses.


        Add filter values as key=value pairs in the query string

        to get filtered results.

        Note: for filters based on Date, only follow `YYYY-MM-DD` format


        Providing the same key with more than one value filters records whose

        value of the given key matches any of the given values. But values of

        different keys must all match.


        Example: `GET /requests/request?policy_id=foo&policy_id=bar&revoke=False&status=APPROVED`


        "policy_id=foo&policy_id=bar" means "the policy is either foo or bar" (same
        field name).


        "policy_id=foo&revoke=False" means "the policy is foo and revoke is false"
        (different field names).'
      operationId: list_requests_request_get
      responses:
        '200':
          content:
            application/json:
              schema: {}
          description: Successful Response
      security:
      - HTTPBearer: []
      summary: List Requests
      tags:
      - Query
    post:
      description: 'Create a new access request.


        Use the "revoke" query parameter to create a request to revoke access

        instead of a request to grant access.


        If no "status" is specified in the request body, will use the configured

        DEFAULT_INITIAL_STATUS. Because users can only request access to a

        policy once, each ("username", "policy_id") combination must be

        unique unless past requests'' statuses are in FINAL_STATUSES.


        If no "username" is specified in the request body, will create an access

        request for the user who provided the token.'
      operationId: create_request_request_post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateRequestInput'
        required: true
      responses:
        '201':
          content:
            application/json:
              schema: {}
          description: Successful Response
        '422':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
          description: Validation Error
      security:
      - HTTPBearer: []
      summary: Create Request
      tags:
      - Manage
  /request/user:
    get:
      description: 'List current user''s requests.


        Use the "active" query parameter to get only the requests

        created by the user that are not in DRAFT or FINAL statuses.


        Add filter values as key=value pairs in the query string

        to get filtered results.

        Note: for filters based on Date, only follow `YYYY-MM-DD` format


        Providing the same key with more than one value filters records whose

        value of the given key matches any of the given values. But values of

        different keys must all match.


        Example: `GET /requests/user?policy_id=foo&policy_id=bar&revoke=False&status=APPROVED`


        "policy_id=foo&policy_id=bar" means "the policy is either foo or bar" (same
        field name).


        "policy_id=foo&revoke=False" means "the policy is foo and revoke is false"
        (different field names).'
      operationId: list_user_requests_request_user_get
      responses:
        '200':
          content:
            application/json:
              schema: {}
          description: Successful Response
      security:
      - HTTPBearer: []
      summary: List User Requests
      tags:
      - Query
  /request/user_resource_paths:
    post:
      description: 'Return whether the current user has already requested access to
        the

        specified resource path(s), including prefixes of the resource path(s).

        If the previous request was denied or is still in draft status, will

        return False.'
      operationId: check_user_resource_paths_request_user_resource_paths_post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Body_check_user_resource_paths_request_user_resource_paths_post'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema: {}
          description: Successful Response
        '422':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
          description: Validation Error
      security:
      - HTTPBearer: []
      summary: Check User Resource Paths
      tags:
      - Query
  /request/{request_id}:
    delete:
      description: Delete an access request.
      operationId: delete_request_request__request_id__delete
      parameters:
      - in: path
        name: request_id
        required: true
        schema:
          format: uuid
          title: Request Id
          type: string
      responses:
        '200':
          content:
            application/json:
              schema: {}
          description: Successful Response
        '422':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
          description: Validation Error
      security:
      - HTTPBearer: []
      summary: Delete Request
      tags:
      - Manage
    get:
      operationId: get_request_request__request_id__get
      parameters:
      - in: path
        name: request_id
        required: true
        schema:
          format: uuid
          title: Request Id
          type: string
      responses:
        '200':
          content:
            application/json:
              schema: {}
          description: Successful Response
        '422':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
          description: Validation Error
      security:
      - HTTPBearer: []
      summary: Get Request
      tags:
      - Query
    put:
      description: Update an access request with a new "status".
      operationId: update_request_request__request_id__put
      parameters:
      - in: path
        name: request_id
        required: true
        schema:
          format: uuid
          title: Request Id
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Body_update_request_request__request_id__put'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema: {}
          description: Successful Response
        '422':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
          description: Validation Error
      security:
      - HTTPBearer: []
      summary: Update Request
      tags:
      - Manage
